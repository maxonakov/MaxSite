{"version":3,"sources":["../../node_modules/micromodal/dist/micromodal.es.js","../../node_modules/domready/ready.js","searchwp-modal-form.js"],"names":["MicroModal","FOCUSABLE_ELEMENTS","Modal","constructor","targetModal","triggers","onShow","onClose","openTrigger","closeTrigger","disableScroll","disableFocus","awaitCloseAnimation","awaitOpenAnimation","debugMode","modal","document","getElementById","config","length","registerTriggers","onClick","bind","onKeydown","filter","Boolean","forEach","trigger","addEventListener","event","showModal","activeElement","setAttribute","classList","add","scrollBehaviour","addEventListeners","handler","removeEventListener","setFocusToFirstNode","closeModal","removeEventListeners","focus","remove","closeModalById","toggle","body","querySelector","Object","assign","style","overflow","height","target","hasAttribute","preventDefault","keyCode","maintainFocus","getFocusableNodes","nodes","querySelectorAll","Array","focusableNodes","contains","focusedItemIndex","indexOf","shiftKey","activeModal","generateTriggerMap","validateModalPresence","id","console","warn","validateArgs","triggerMap","validateTriggerPresence","init","options","triggerAttr","attributes","value","undefined","push","key","show","close","$el","select","showing","closers","currentTarget","getAttribute","obj","window","jQuery","el","closer"],"mappings":"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","file":"searchwp-modal-form.min.js","sourceRoot":"../src","sourcesContent":["const MicroModal = (() => {\n\n  const FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n\n  class Modal {\n    constructor({\n      targetModal,\n      triggers = [],\n      onShow = () => {},\n      onClose = () => {},\n      openTrigger = 'data-micromodal-trigger',\n      closeTrigger = 'data-micromodal-close',\n      disableScroll = false,\n      disableFocus = false,\n      awaitCloseAnimation = false,\n      awaitOpenAnimation = false,\n      debugMode = false\n    }) {\n      // Save a reference of the modal\n      this.modal = document.getElementById(targetModal); // Save a reference to the passed config\n\n      this.config = {\n        debugMode,\n        disableScroll,\n        openTrigger,\n        closeTrigger,\n        onShow,\n        onClose,\n        awaitCloseAnimation,\n        awaitOpenAnimation,\n        disableFocus // Register click events only if pre binding eventListeners\n\n      };\n      if (triggers.length > 0) this.registerTriggers(...triggers); // pre bind functions for event listeners\n\n      this.onClick = this.onClick.bind(this);\n      this.onKeydown = this.onKeydown.bind(this);\n    }\n    /**\n     * Loops through all openTriggers and binds click event\n     * @param  {array} triggers [Array of node elements]\n     * @return {void}\n     */\n\n\n    registerTriggers(...triggers) {\n      triggers.filter(Boolean).forEach(trigger => {\n        trigger.addEventListener('click', event => this.showModal(event));\n      });\n    }\n\n    showModal() {\n      this.activeElement = document.activeElement;\n      this.modal.setAttribute('aria-hidden', 'false');\n      this.modal.classList.add('is-open');\n      this.scrollBehaviour('disable');\n      this.addEventListeners();\n\n      if (this.config.awaitOpenAnimation) {\n        const handler = () => {\n          this.modal.removeEventListener('animationend', handler, false);\n          this.setFocusToFirstNode();\n        };\n\n        this.modal.addEventListener('animationend', handler, false);\n      } else {\n        this.setFocusToFirstNode();\n      }\n\n      this.config.onShow(this.modal, this.activeElement);\n    }\n\n    closeModal() {\n      const modal = this.modal;\n      this.modal.setAttribute('aria-hidden', 'true');\n      this.removeEventListeners();\n      this.scrollBehaviour('enable');\n\n      if (this.activeElement) {\n        this.activeElement.focus();\n      }\n\n      this.config.onClose(this.modal);\n\n      if (this.config.awaitCloseAnimation) {\n        this.modal.addEventListener('animationend', function handler() {\n          modal.classList.remove('is-open');\n          modal.removeEventListener('animationend', handler, false);\n        }, false);\n      } else {\n        modal.classList.remove('is-open');\n      }\n    }\n\n    closeModalById(targetModal) {\n      this.modal = document.getElementById(targetModal);\n      if (this.modal) this.closeModal();\n    }\n\n    scrollBehaviour(toggle) {\n      if (!this.config.disableScroll) return;\n      const body = document.querySelector('body');\n\n      switch (toggle) {\n        case 'enable':\n          Object.assign(body.style, {\n            overflow: '',\n            height: ''\n          });\n          break;\n\n        case 'disable':\n          Object.assign(body.style, {\n            overflow: 'hidden',\n            height: '100vh'\n          });\n          break;\n\n        default:\n      }\n    }\n\n    addEventListeners() {\n      this.modal.addEventListener('touchstart', this.onClick);\n      this.modal.addEventListener('click', this.onClick);\n      document.addEventListener('keydown', this.onKeydown);\n    }\n\n    removeEventListeners() {\n      this.modal.removeEventListener('touchstart', this.onClick);\n      this.modal.removeEventListener('click', this.onClick);\n      document.removeEventListener('keydown', this.onKeydown);\n    }\n\n    onClick(event) {\n      if (event.target.hasAttribute(this.config.closeTrigger)) {\n        this.closeModal();\n        event.preventDefault();\n      }\n    }\n\n    onKeydown(event) {\n      if (event.keyCode === 27) this.closeModal(event);\n      if (event.keyCode === 9) this.maintainFocus(event);\n    }\n\n    getFocusableNodes() {\n      const nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);\n      return Array(...nodes);\n    }\n\n    setFocusToFirstNode() {\n      if (this.config.disableFocus) return;\n      const focusableNodes = this.getFocusableNodes();\n      if (focusableNodes.length) focusableNodes[0].focus();\n    }\n\n    maintainFocus(event) {\n      const focusableNodes = this.getFocusableNodes(); // if disableFocus is true\n\n      if (!this.modal.contains(document.activeElement)) {\n        focusableNodes[0].focus();\n      } else {\n        const focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n        if (event.shiftKey && focusedItemIndex === 0) {\n          focusableNodes[focusableNodes.length - 1].focus();\n          event.preventDefault();\n        }\n\n        if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {\n          focusableNodes[0].focus();\n          event.preventDefault();\n        }\n      }\n    }\n\n  }\n  /**\n   * Modal prototype ends.\n   * Here on code is responsible for detecting and\n   * auto binding event handlers on modal triggers\n   */\n  // Keep a reference to the opened modal\n\n\n  let activeModal = null;\n  /**\n   * Generates an associative array of modals and it's\n   * respective triggers\n   * @param  {array} triggers     An array of all triggers\n   * @param  {string} triggerAttr The data-attribute which triggers the module\n   * @return {array}\n   */\n\n  const generateTriggerMap = (triggers, triggerAttr) => {\n    const triggerMap = [];\n    triggers.forEach(trigger => {\n      const targetModal = trigger.attributes[triggerAttr].value;\n      if (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];\n      triggerMap[targetModal].push(trigger);\n    });\n    return triggerMap;\n  };\n  /**\n   * Validates whether a modal of the given id exists\n   * in the DOM\n   * @param  {number} id  The id of the modal\n   * @return {boolean}\n   */\n\n\n  const validateModalPresence = id => {\n    if (!document.getElementById(id)) {\n      console.warn(`MicroModal: \\u2757Seems like you have missed %c'${id}'`, 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'ID somewhere in your code. Refer example below to resolve it.');\n      console.warn(`%cExample:`, 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', `<div class=\"modal\" id=\"${id}\"></div>`);\n      return false;\n    }\n  };\n  /**\n   * Validates if there are modal triggers present\n   * in the DOM\n   * @param  {array} triggers An array of data-triggers\n   * @return {boolean}\n   */\n\n\n  const validateTriggerPresence = triggers => {\n    if (triggers.length <= 0) {\n      console.warn(`MicroModal: \\u2757Please specify at least one %c'micromodal-trigger'`, 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'data attribute.');\n      console.warn(`%cExample:`, 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', `<a href=\"#\" data-micromodal-trigger=\"my-modal\"></a>`);\n      return false;\n    }\n  };\n  /**\n   * Checks if triggers and their corresponding modals\n   * are present in the DOM\n   * @param  {array} triggers   Array of DOM nodes which have data-triggers\n   * @param  {array} triggerMap Associative array of modals and their triggers\n   * @return {boolean}\n   */\n\n\n  const validateArgs = (triggers, triggerMap) => {\n    validateTriggerPresence(triggers);\n    if (!triggerMap) return true;\n\n    for (var id in triggerMap) validateModalPresence(id);\n\n    return true;\n  };\n  /**\n   * Binds click handlers to all modal triggers\n   * @param  {object} config [description]\n   * @return void\n   */\n\n\n  const init = config => {\n    // Create an config object with default openTrigger\n    const options = Object.assign({}, {\n      openTrigger: 'data-micromodal-trigger'\n    }, config); // Collects all the nodes with the trigger\n\n    const triggers = [...document.querySelectorAll(`[${options.openTrigger}]`)]; // Makes a mappings of modals with their trigger nodes\n\n    const triggerMap = generateTriggerMap(triggers, options.openTrigger); // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return; // For every target modal creates a new instance\n\n    for (var key in triggerMap) {\n      let value = triggerMap[key];\n      options.targetModal = key;\n      options.triggers = [...value];\n      activeModal = new Modal(options); // eslint-disable-line no-new\n    }\n  };\n  /**\n   * Shows a particular modal\n   * @param  {string} targetModal [The id of the modal to display]\n   * @param  {object} config [The configuration object to pass]\n   * @return {void}\n   */\n\n\n  const show = (targetModal, config) => {\n    const options = config || {};\n    options.targetModal = targetModal; // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateModalPresence(targetModal) === false) return; // stores reference to active modal\n\n    activeModal = new Modal(options); // eslint-disable-line no-new\n\n    activeModal.showModal();\n  };\n  /**\n   * Closes the active modal\n   * @param  {string} targetModal [The id of the modal to close]\n   * @return {void}\n   */\n\n\n  const close = targetModal => {\n    targetModal ? activeModal.closeModalById(targetModal) : activeModal.closeModal();\n  };\n\n  return {\n    init,\n    show,\n    close\n  };\n})();\n\nexport default MicroModal;\n","/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n","import MicroModal from \"micromodal\";\nimport domready from \"domready\";\n\nMicroModal.init({\n  onShow: function(modal) {\n    let $el = modal.querySelectorAll('[name=\"s\"]')[0];\n    $el.focus();\n    $el.select();\n  }\n});\n\ndomready(function() {\n  // We're implementing our own click handlers for opening/closing modals so\n  // we have a bit more control over how the events execute (e.g. preventing default)\n  let showing = \"\";\n  let triggers = document.querySelectorAll(\"[data-searchwp-modal-trigger]\");\n  let closers = document.querySelectorAll(\"[data-searchwp-modal-form-close]\");\n\n  triggers.forEach(function(trigger) {\n    trigger.addEventListener(\n      \"click\",\n      function(event) {\n        event.preventDefault();\n        let modal = event.currentTarget.getAttribute(\n          \"data-searchwp-modal-trigger\"\n        );\n        showing = modal;\n        MicroModal.show(modal, {\n          onShow: function(obj) {\n            if (window.jQuery) {\n              jQuery('body').trigger('searchwpModalOnShow', {\n                modal: modal,\n                el: jQuery('#' + modal),\n                obj: obj\n              });\n            }\n          },\n          onClose: function(obj) {\n            if (window.jQuery) {\n              jQuery('body').trigger('searchwpModalOnClose', {\n                modal: modal,\n                el: jQuery('#' + modal),\n                obj: obj\n              });\n            }\n          }\n        });\n      },\n      false\n    );\n  });\n\n  closers.forEach(function(closer) {\n    closer.addEventListener(\n      \"click\",\n      function(event) {\n        if (\n          event.target.hasAttribute(\"data-searchwp-modal-form-close\")\n        ) {\n          event.preventDefault();\n          MicroModal.close(showing);\n          showing = \"\";\n        }\n      },\n      true\n    );\n  });\n});\n"]}